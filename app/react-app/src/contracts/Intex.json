{
  "contractName": "Intex",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function",
      "payable": true
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/home/irenee/work/dev/blockchain/adchain/contracts/Intex.sol\":\"Intex\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/irenee/work/dev/blockchain/adchain/contracts/Intex.sol\":{\"keccak256\":\"0x90af5a2d3e6c80fdfce93116c51c5933785964d1bc19928fbbb6e78447e0b98a\",\"urls\":[\"bzz-raw://ef261d1f12c40077e34453499b8409b064c3b3341125140fbdab80049fcf06e7\",\"dweb:/ipfs/QmeUdV9UevZHSoHj32DMMpc2x9gLnCKTwSFTg8aXCmoBpD\"]},\"@openzeppelin/contracts/GSN/Context.sol\":{\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://248246ac66e6479dce1ad7d4945ec5540c98ceb09881e93c93f7c48d5772925c\",\"dweb:/ipfs/QmXr8tmUiZgEYid6ixeeBRmTdUnASWjKzhP3KRxMPy8fRt\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26e50e3f7b6482fb6f598f2e006994a74aa492687daa4b3eee7fd4fb5398ce7f\",\"dweb:/ipfs/QmZudqoPSkA4USLMFsBBmt19dDPZFS8aaAmL5R7pECXu6t\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xf1ac0ee2ca2b36f90574d3b2b37422ced4fa829741d80794c62f5958a2d8f474\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d527ba022dc8eb272c76aa637913aa261e37847e5b465404328af1916fec55e2\",\"dweb:/ipfs/Qmei5afXj1pbucjpi7N3Epjb4o5AuzYXsSaUgYZmdPJHbu\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4bd4c9419d1182612ef415c60a83a9039b227fccb799937963448114c0473b58\",\"dweb:/ipfs/Qmat1U571v55F5JDDHHX7igGcmLF8Ehk9CzsWpjbdx3RTH\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001d7738038062001d77833981810160405281019062000037919062000416565b6040518060400160405280601481526020017f496e74656c6c6967656e636545786368616e67650000000000000000000000008152506040518060400160405280600481526020017f494e5458000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000bb92919062000359565b508060049080519060200190620000d492919062000359565b506012600560006101000a81548160ff021916908360ff160217905550505033600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200014633826200014d60201b60201c565b506200056d565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001c0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001b790620004f9565b60405180910390fd5b620001d460008383620002fc60201b60201c565b620001f0816002546200030160201b620009581790919060201c565b6002819055506200024e816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200030160201b620009581790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002f091906200051b565b60405180910390a35050565b505050565b6000808284019050838110156200034f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200034690620004d7565b60405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200039c57805160ff1916838001178555620003cd565b82800160010185558215620003cd579182015b82811115620003cc578251825591602001919060010190620003af565b5b509050620003dc9190620003e0565b5090565b5b80821115620003fb576000816000905550600101620003e1565b5090565b600081519050620004108162000553565b92915050565b6000602082840312156200042957600080fd5b60006200043984828501620003ff565b91505092915050565b600062000451601b8362000538565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b600062000493601f8362000538565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b620004d18162000549565b82525050565b60006020820190508181036000830152620004f28162000442565b9050919050565b60006020820190508181036000830152620005148162000484565b9050919050565b6000602082019050620005326000830184620004c6565b92915050565b600082825260208201905092915050565b6000819050919050565b6200055e8162000549565b81146200056a57600080fd5b50565b6117fa806200057d6000396000f3fe6080604052600436106100dd5760003560e01c80638da5cb5b1161007f578063a9059cbb11610059578063a9059cbb146102ea578063aa6ca80814610327578063dd62ed3e14610331578063f3fef3a31461036e576100dd565b80638da5cb5b1461025757806395d89b4114610282578063a457c2d7146102ad576100dd565b806323b872dd116100bb57806323b872dd14610175578063313ce567146101b257806339509351146101dd57806370a082311461021a576100dd565b806306fdde03146100e2578063095ea7b31461010d57806318160ddd1461014a575b600080fd5b3480156100ee57600080fd5b506100f7610397565b604051610104919061150d565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f91906111a8565b610439565b60405161014191906114f2565b60405180910390f35b34801561015657600080fd5b5061015f610457565b60405161016c919061160f565b60405180910390f35b34801561018157600080fd5b5061019c60048036038101906101979190611159565b610461565b6040516101a991906114f2565b60405180910390f35b3480156101be57600080fd5b506101c761053a565b6040516101d4919061162a565b60405180910390f35b3480156101e957600080fd5b5061020460048036038101906101ff91906111a8565b610551565b60405161021191906114f2565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c91906110b8565b610604565b60405161024e919061160f565b60405180910390f35b34801561026357600080fd5b5061026c61064c565b60405161027991906114d7565b60405180910390f35b34801561028e57600080fd5b50610297610672565b6040516102a4919061150d565b60405180910390f35b3480156102b957600080fd5b506102d460048036038101906102cf91906111a8565b610714565b6040516102e191906114f2565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c91906111a8565b6107e1565b60405161031e91906114f2565b60405180910390f35b61032f6107ff565b005b34801561033d57600080fd5b506103586004803603810190610353919061111d565b61082c565b604051610365919061160f565b60405180910390f35b34801561037a57600080fd5b50610395600480360381019061039091906110e1565b6108b3565b005b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561042f5780601f106104045761010080835404028352916020019161042f565b820191906000526020600020905b81548152906001019060200180831161041257829003601f168201915b5050505050905090565b600061044d6104466109ad565b84846109b5565b6001905092915050565b6000600254905090565b600061046e848484610b80565b61052f8461047a6109ad565b61052a8560405180606001604052806028815260200161177860289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006104e06109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e159092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006105fa61055e6109ad565b846105f5856001600061056f6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461095890919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561070a5780601f106106df5761010080835404028352916020019161070a565b820191906000526020600020905b8154815290600101906020018083116106ed57829003601f168201915b5050505050905090565b60006107d76107216109ad565b846107d2856040518060600160405280602581526020016117a0602591396001600061074b6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e159092919063ffffffff16565b6109b5565b6001905092915050565b60006107f56107ee6109ad565b8484610b80565b6001905092915050565b6000620f42409050600061081c8234610e7090919063ffffffff16565b90506108283382610ee0565b5050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461090d57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610953573d6000803e3d6000fd5b505050565b6000808284019050838110156109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099a9061156f565b60405180910390fd5b8091505092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c906115cf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8c9061154f565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610b73919061160f565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610bf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be7906115af565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c579061152f565b60405180910390fd5b610c6b838383611074565b610cd681604051806060016040528060268152602001611752602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e159092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d69816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461095890919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e08919061160f565b60405180910390a3505050565b6000838311158290610e5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e54919061150d565b60405180910390fd5b5060008385039050809150509392505050565b600080831415610e835760009050610eda565b6000828402905082848281610e9457fe5b0414610ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecc9061158f565b60405180910390fd5b809150505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f47906115ef565b60405180910390fd5b610f5c60008383611074565b610f718160025461095890919063ffffffff16565b600281905550610fc8816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461095890919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611068919061160f565b60405180910390a35050565b505050565b6000813590506110888161170c565b92915050565b60008135905061109d81611723565b92915050565b6000813590506110b28161173a565b92915050565b6000602082840312156110ca57600080fd5b60006110d884828501611079565b91505092915050565b600080604083850312156110f457600080fd5b60006111028582860161108e565b9250506020611113858286016110a3565b9150509250929050565b6000806040838503121561113057600080fd5b600061113e85828601611079565b925050602061114f85828601611079565b9150509250929050565b60008060006060848603121561116e57600080fd5b600061117c86828701611079565b935050602061118d86828701611079565b925050604061119e868287016110a3565b9150509250925092565b600080604083850312156111bb57600080fd5b60006111c985828601611079565b92505060206111da858286016110a3565b9150509250929050565b6111ed81611661565b82525050565b6111fc81611685565b82525050565b600061120d82611645565b6112178185611650565b93506112278185602086016116c8565b611230816116fb565b840191505092915050565b6000611248602383611650565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006112ae602283611650565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611314601b83611650565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611354602183611650565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006113ba602583611650565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611420602483611650565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611486601f83611650565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b6114c2816116b1565b82525050565b6114d1816116bb565b82525050565b60006020820190506114ec60008301846111e4565b92915050565b600060208201905061150760008301846111f3565b92915050565b600060208201905081810360008301526115278184611202565b905092915050565b600060208201905081810360008301526115488161123b565b9050919050565b60006020820190508181036000830152611568816112a1565b9050919050565b6000602082019050818103600083015261158881611307565b9050919050565b600060208201905081810360008301526115a881611347565b9050919050565b600060208201905081810360008301526115c8816113ad565b9050919050565b600060208201905081810360008301526115e881611413565b9050919050565b6000602082019050818103600083015261160881611479565b9050919050565b600060208201905061162460008301846114b9565b92915050565b600060208201905061163f60008301846114c8565b92915050565b600081519050919050565b600082825260208201905092915050565b600061166c82611691565b9050919050565b600061167e82611691565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156116e65780820151818401526020810190506116cb565b838111156116f5576000848401525b50505050565b6000601f19601f8301169050919050565b61171581611661565b811461172057600080fd5b50565b61172c81611673565b811461173757600080fd5b50565b611743816116b1565b811461174e57600080fd5b5056fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212201f8f82c6d067dc4e1476a5dc1fbea90349d782c4ab43ba1657b31f498ec9a8c064736f6c63430007010033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80638da5cb5b1161007f578063a9059cbb11610059578063a9059cbb146102ea578063aa6ca80814610327578063dd62ed3e14610331578063f3fef3a31461036e576100dd565b80638da5cb5b1461025757806395d89b4114610282578063a457c2d7146102ad576100dd565b806323b872dd116100bb57806323b872dd14610175578063313ce567146101b257806339509351146101dd57806370a082311461021a576100dd565b806306fdde03146100e2578063095ea7b31461010d57806318160ddd1461014a575b600080fd5b3480156100ee57600080fd5b506100f7610397565b604051610104919061150d565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f91906111a8565b610439565b60405161014191906114f2565b60405180910390f35b34801561015657600080fd5b5061015f610457565b60405161016c919061160f565b60405180910390f35b34801561018157600080fd5b5061019c60048036038101906101979190611159565b610461565b6040516101a991906114f2565b60405180910390f35b3480156101be57600080fd5b506101c761053a565b6040516101d4919061162a565b60405180910390f35b3480156101e957600080fd5b5061020460048036038101906101ff91906111a8565b610551565b60405161021191906114f2565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c91906110b8565b610604565b60405161024e919061160f565b60405180910390f35b34801561026357600080fd5b5061026c61064c565b60405161027991906114d7565b60405180910390f35b34801561028e57600080fd5b50610297610672565b6040516102a4919061150d565b60405180910390f35b3480156102b957600080fd5b506102d460048036038101906102cf91906111a8565b610714565b6040516102e191906114f2565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c91906111a8565b6107e1565b60405161031e91906114f2565b60405180910390f35b61032f6107ff565b005b34801561033d57600080fd5b506103586004803603810190610353919061111d565b61082c565b604051610365919061160f565b60405180910390f35b34801561037a57600080fd5b50610395600480360381019061039091906110e1565b6108b3565b005b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561042f5780601f106104045761010080835404028352916020019161042f565b820191906000526020600020905b81548152906001019060200180831161041257829003601f168201915b5050505050905090565b600061044d6104466109ad565b84846109b5565b6001905092915050565b6000600254905090565b600061046e848484610b80565b61052f8461047a6109ad565b61052a8560405180606001604052806028815260200161177860289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006104e06109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e159092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006105fa61055e6109ad565b846105f5856001600061056f6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461095890919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561070a5780601f106106df5761010080835404028352916020019161070a565b820191906000526020600020905b8154815290600101906020018083116106ed57829003601f168201915b5050505050905090565b60006107d76107216109ad565b846107d2856040518060600160405280602581526020016117a0602591396001600061074b6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e159092919063ffffffff16565b6109b5565b6001905092915050565b60006107f56107ee6109ad565b8484610b80565b6001905092915050565b6000620f42409050600061081c8234610e7090919063ffffffff16565b90506108283382610ee0565b5050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461090d57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610953573d6000803e3d6000fd5b505050565b6000808284019050838110156109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099a9061156f565b60405180910390fd5b8091505092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c906115cf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8c9061154f565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610b73919061160f565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610bf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be7906115af565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c579061152f565b60405180910390fd5b610c6b838383611074565b610cd681604051806060016040528060268152602001611752602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e159092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d69816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461095890919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e08919061160f565b60405180910390a3505050565b6000838311158290610e5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e54919061150d565b60405180910390fd5b5060008385039050809150509392505050565b600080831415610e835760009050610eda565b6000828402905082848281610e9457fe5b0414610ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecc9061158f565b60405180910390fd5b809150505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f47906115ef565b60405180910390fd5b610f5c60008383611074565b610f718160025461095890919063ffffffff16565b600281905550610fc8816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461095890919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611068919061160f565b60405180910390a35050565b505050565b6000813590506110888161170c565b92915050565b60008135905061109d81611723565b92915050565b6000813590506110b28161173a565b92915050565b6000602082840312156110ca57600080fd5b60006110d884828501611079565b91505092915050565b600080604083850312156110f457600080fd5b60006111028582860161108e565b9250506020611113858286016110a3565b9150509250929050565b6000806040838503121561113057600080fd5b600061113e85828601611079565b925050602061114f85828601611079565b9150509250929050565b60008060006060848603121561116e57600080fd5b600061117c86828701611079565b935050602061118d86828701611079565b925050604061119e868287016110a3565b9150509250925092565b600080604083850312156111bb57600080fd5b60006111c985828601611079565b92505060206111da858286016110a3565b9150509250929050565b6111ed81611661565b82525050565b6111fc81611685565b82525050565b600061120d82611645565b6112178185611650565b93506112278185602086016116c8565b611230816116fb565b840191505092915050565b6000611248602383611650565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006112ae602283611650565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611314601b83611650565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611354602183611650565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006113ba602583611650565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611420602483611650565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611486601f83611650565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b6114c2816116b1565b82525050565b6114d1816116bb565b82525050565b60006020820190506114ec60008301846111e4565b92915050565b600060208201905061150760008301846111f3565b92915050565b600060208201905081810360008301526115278184611202565b905092915050565b600060208201905081810360008301526115488161123b565b9050919050565b60006020820190508181036000830152611568816112a1565b9050919050565b6000602082019050818103600083015261158881611307565b9050919050565b600060208201905081810360008301526115a881611347565b9050919050565b600060208201905081810360008301526115c8816113ad565b9050919050565b600060208201905081810360008301526115e881611413565b9050919050565b6000602082019050818103600083015261160881611479565b9050919050565b600060208201905061162460008301846114b9565b92915050565b600060208201905061163f60008301846114c8565b92915050565b600081519050919050565b600082825260208201905092915050565b600061166c82611691565b9050919050565b600061167e82611691565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156116e65780820151818401526020810190506116cb565b838111156116f5576000848401525b50505050565b6000601f19601f8301169050919050565b61171581611661565b811461172057600080fd5b50565b61172c81611673565b811461173757600080fd5b50565b611743816116b1565b811461174e57600080fd5b5056fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212201f8f82c6d067dc4e1476a5dc1fbea90349d782c4ab43ba1657b31f498ec9a8c064736f6c63430007010033",
  "immutableReferences": {},
  "sourceMap": "168:798:1:-:0;;;258:228;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2013:134:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2086:4;2078:5;:12;;;;;;;;;;;;:::i;:::-;;2110:6;2100:7;:16;;;;;;;;;;;;:::i;:::-;;2138:2;2126:9;;:14;;;;;;;;;;;;;;;;;;2013:134;;353:10:1::1;345:5;;:18;;;;;;;;;;;;;;;;;;373:32;379:10;391:13;373:5;;;:32;;:::i;:::-;258:228:::0;168:798;;7828:370:6;7930:1;7911:21;;:7;:21;;;;7903:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;7979:49;8008:1;8012:7;8021:6;7979:20;;;:49;;:::i;:::-;8054:24;8071:6;8054:12;;:16;;;;;;:24;;;;:::i;:::-;8039:12;:39;;;;8109:30;8132:6;8109:9;:18;8119:7;8109:18;;;;;;;;;;;;;;;;:22;;;;;;:30;;;;:::i;:::-;8088:9;:18;8098:7;8088:18;;;;;;;;;;;;;;;:51;;;;8175:7;8154:37;;8171:1;8154:37;;;8184:6;8154:37;;;;;;:::i;:::-;;;;;;;;7828:370;;:::o;10688:92::-;;;;:::o;874:176:5:-;932:7;951:9;967:1;963;:5;951:17;;991:1;986;:6;;978:46;;;;;;;;;;;;:::i;:::-;;;;;;;;;1042:1;1035:8;;;874:176;;;;:::o;168:798:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;5:134:-1:-;;89:6;83:13;74:22;;101:33;128:5;101:33;:::i;:::-;68:71;;;;:::o;146:263::-;;261:2;249:9;240:7;236:23;232:32;229:2;;;277:1;274;267:12;229:2;312:1;329:64;385:7;376:6;365:9;361:22;329:64;:::i;:::-;319:74;;291:108;223:186;;;;:::o;417:327::-;;577:67;641:2;636:3;577:67;:::i;:::-;570:74;;677:29;673:1;668:3;664:11;657:50;735:2;730:3;726:12;719:19;;563:181;;;:::o;753:331::-;;913:67;977:2;972:3;913:67;:::i;:::-;906:74;;1013:33;1009:1;1004:3;1000:11;993:54;1075:2;1070:3;1066:12;1059:19;;899:185;;;:::o;1092:113::-;1175:24;1193:5;1175:24;:::i;:::-;1170:3;1163:37;1157:48;;:::o;1212:416::-;;1412:2;1401:9;1397:18;1389:26;;1462:9;1456:4;1452:20;1448:1;1437:9;1433:17;1426:47;1487:131;1613:4;1487:131;:::i;:::-;1479:139;;1383:245;;;:::o;1635:416::-;;1835:2;1824:9;1820:18;1812:26;;1885:9;1879:4;1875:20;1871:1;1860:9;1856:17;1849:47;1910:131;2036:4;1910:131;:::i;:::-;1902:139;;1806:245;;;:::o;2058:222::-;;2185:2;2174:9;2170:18;2162:26;;2199:71;2267:1;2256:9;2252:17;2243:6;2199:71;:::i;:::-;2156:124;;;;:::o;2288:163::-;;2403:6;2398:3;2391:19;2440:4;2435:3;2431:14;2416:29;;2384:67;;;;:::o;2459:72::-;;2521:5;2510:16;;2504:27;;;:::o;2538:117::-;2607:24;2625:5;2607:24;:::i;:::-;2600:5;2597:35;2587:2;;2646:1;2643;2636:12;2587:2;2581:74;:::o;168:798:1:-;;;;;;;",
  "deployedSourceMap": "168:798:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2212:81:6;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4248:166;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3255:98;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4874:317;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3114:81;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5586:215;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3411:117;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;231:20:1;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2406:85:6;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6288:266;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3731:172;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;534:211:1;;;:::i;:::-;;3961:149:6;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;807:157:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2212:81:6;2249:13;2281:5;2274:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2212:81;:::o;4248:166::-;4331:4;4347:39;4356:12;:10;:12::i;:::-;4370:7;4379:6;4347:8;:39::i;:::-;4403:4;4396:11;;4248:166;;;;:::o;3255:98::-;3308:7;3334:12;;3327:19;;3255:98;:::o;4874:317::-;4980:4;4996:36;5006:6;5014:9;5025:6;4996:9;:36::i;:::-;5042:121;5051:6;5059:12;:10;:12::i;:::-;5073:89;5111:6;5073:89;;;;;;;;;;;;;;;;;:11;:19;5085:6;5073:19;;;;;;;;;;;;;;;:33;5093:12;:10;:12::i;:::-;5073:33;;;;;;;;;;;;;;;;:37;;:89;;;;;:::i;:::-;5042:8;:121::i;:::-;5180:4;5173:11;;4874:317;;;;;:::o;3114:81::-;3155:5;3179:9;;;;;;;;;;;3172:16;;3114:81;:::o;5586:215::-;5674:4;5690:83;5699:12;:10;:12::i;:::-;5713:7;5722:50;5761:10;5722:11;:25;5734:12;:10;:12::i;:::-;5722:25;;;;;;;;;;;;;;;:34;5748:7;5722:34;;;;;;;;;;;;;;;;:38;;:50;;;;:::i;:::-;5690:8;:83::i;:::-;5790:4;5783:11;;5586:215;;;;:::o;3411:117::-;3477:7;3503:9;:18;3513:7;3503:18;;;;;;;;;;;;;;;;3496:25;;3411:117;;;:::o;231:20:1:-;;;;;;;;;;;;;:::o;2406:85:6:-;2445:13;2477:7;2470:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2406:85;:::o;6288:266::-;6381:4;6397:129;6406:12;:10;:12::i;:::-;6420:7;6429:96;6468:15;6429:96;;;;;;;;;;;;;;;;;:11;:25;6441:12;:10;:12::i;:::-;6429:25;;;;;;;;;;;;;;;:34;6455:7;6429:34;;;;;;;;;;;;;;;;:38;;:96;;;;;:::i;:::-;6397:8;:129::i;:::-;6543:4;6536:11;;6288:266;;;;:::o;3731:172::-;3817:4;3833:42;3843:12;:10;:12::i;:::-;3857:9;3868:6;3833:9;:42::i;:::-;3892:4;3885:11;;3731:172;;;;:::o;534:211:1:-;584:20;615:5;584:37;;659:14;676:27;690:12;676:9;:13;;:27;;;;:::i;:::-;659:44;;713:25;719:10;731:6;713:5;:25::i;:::-;534:211;;:::o;3961:149:6:-;4050:7;4076:11;:18;4088:5;4076:18;;;;;;;;;;;;;;;:27;4095:7;4076:27;;;;;;;;;;;;;;;;4069:34;;3961:149;;;;:::o;807:157:1:-;913:5;;;;;;;;;;;899:19;;:10;:19;;;891:28;;;;;;929:11;:20;;:28;950:6;929:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;807:157;;:::o;874:176:5:-;932:7;951:9;967:1;963;:5;951:17;;991:1;986;:6;;978:46;;;;;;;;;;;;:::i;:::-;;;;;;;;;1042:1;1035:8;;;874:176;;;;:::o;590:104:4:-;643:15;677:10;670:17;;590:104;:::o;9350:340:6:-;9468:1;9451:19;;:5;:19;;;;9443:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;9548:1;9529:21;;:7;:21;;;;9521:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;9630:6;9600:11;:18;9612:5;9600:18;;;;;;;;;;;;;;;:27;9619:7;9600:27;;;;;;;;;;;;;;;:36;;;;9667:7;9651:32;;9660:5;9651:32;;;9676:6;9651:32;;;;;;:::i;:::-;;;;;;;;9350:340;;;:::o;7028:530::-;7151:1;7133:20;;:6;:20;;;;7125:70;;;;;;;;;;;;:::i;:::-;;;;;;;;;7234:1;7213:23;;:9;:23;;;;7205:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;7287:47;7308:6;7316:9;7327:6;7287:20;:47::i;:::-;7365:71;7387:6;7365:71;;;;;;;;;;;;;;;;;:9;:17;7375:6;7365:17;;;;;;;;;;;;;;;;:21;;:71;;;;;:::i;:::-;7345:9;:17;7355:6;7345:17;;;;;;;;;;;;;;;:91;;;;7469:32;7494:6;7469:9;:20;7479:9;7469:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;7446:9;:20;7456:9;7446:20;;;;;;;;;;;;;;;:55;;;;7533:9;7516:35;;7525:6;7516:35;;;7544:6;7516:35;;;;;;:::i;:::-;;;;;;;;7028:530;;;:::o;1746:187:5:-;1832:7;1864:1;1859;:6;;1867:12;1851:29;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;1890:9;1906:1;1902;:5;1890:17;;1925:1;1918:8;;;1746:187;;;;;:::o;2180:459::-;2238:7;2484:1;2479;:6;2475:45;;;2508:1;2501:8;;;;2475:45;2530:9;2546:1;2542;:5;2530:17;;2574:1;2569;2565;:5;;;;;;:10;2557:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2631:1;2624:8;;;2180:459;;;;;:::o;7828:370:6:-;7930:1;7911:21;;:7;:21;;;;7903:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;7979:49;8008:1;8012:7;8021:6;7979:20;:49::i;:::-;8054:24;8071:6;8054:12;;:16;;:24;;;;:::i;:::-;8039:12;:39;;;;8109:30;8132:6;8109:9;:18;8119:7;8109:18;;;;;;;;;;;;;;;;:22;;:30;;;;:::i;:::-;8088:9;:18;8098:7;8088:18;;;;;;;;;;;;;;;:51;;;;8175:7;8154:37;;8171:1;8154:37;;;8184:6;8154:37;;;;;;:::i;:::-;;;;;;;;7828:370;;:::o;10688:92::-;;;;:::o;5:130:-1:-;;85:6;72:20;63:29;;97:33;124:5;97:33;:::i;:::-;57:78;;;;:::o;142:146::-;;230:6;217:20;208:29;;242:41;277:5;242:41;:::i;:::-;202:86;;;;:::o;295:130::-;;375:6;362:20;353:29;;387:33;414:5;387:33;:::i;:::-;347:78;;;;:::o;432:241::-;;536:2;524:9;515:7;511:23;507:32;504:2;;;552:1;549;542:12;504:2;587:1;604:53;649:7;640:6;629:9;625:22;604:53;:::i;:::-;594:63;;566:97;498:175;;;;:::o;680:382::-;;;809:2;797:9;788:7;784:23;780:32;777:2;;;825:1;822;815:12;777:2;860:1;877:61;930:7;921:6;910:9;906:22;877:61;:::i;:::-;867:71;;839:105;975:2;993:53;1038:7;1029:6;1018:9;1014:22;993:53;:::i;:::-;983:63;;954:98;771:291;;;;;:::o;1069:366::-;;;1190:2;1178:9;1169:7;1165:23;1161:32;1158:2;;;1206:1;1203;1196:12;1158:2;1241:1;1258:53;1303:7;1294:6;1283:9;1279:22;1258:53;:::i;:::-;1248:63;;1220:97;1348:2;1366:53;1411:7;1402:6;1391:9;1387:22;1366:53;:::i;:::-;1356:63;;1327:98;1152:283;;;;;:::o;1442:491::-;;;;1580:2;1568:9;1559:7;1555:23;1551:32;1548:2;;;1596:1;1593;1586:12;1548:2;1631:1;1648:53;1693:7;1684:6;1673:9;1669:22;1648:53;:::i;:::-;1638:63;;1610:97;1738:2;1756:53;1801:7;1792:6;1781:9;1777:22;1756:53;:::i;:::-;1746:63;;1717:98;1846:2;1864:53;1909:7;1900:6;1889:9;1885:22;1864:53;:::i;:::-;1854:63;;1825:98;1542:391;;;;;:::o;1940:366::-;;;2061:2;2049:9;2040:7;2036:23;2032:32;2029:2;;;2077:1;2074;2067:12;2029:2;2112:1;2129:53;2174:7;2165:6;2154:9;2150:22;2129:53;:::i;:::-;2119:63;;2091:97;2219:2;2237:53;2282:7;2273:6;2262:9;2258:22;2237:53;:::i;:::-;2227:63;;2198:98;2023:283;;;;;:::o;2313:113::-;2396:24;2414:5;2396:24;:::i;:::-;2391:3;2384:37;2378:48;;:::o;2433:104::-;2510:21;2525:5;2510:21;:::i;:::-;2505:3;2498:34;2492:45;;:::o;2544:347::-;;2656:39;2689:5;2656:39;:::i;:::-;2707:71;2771:6;2766:3;2707:71;:::i;:::-;2700:78;;2783:52;2828:6;2823:3;2816:4;2809:5;2805:16;2783:52;:::i;:::-;2856:29;2878:6;2856:29;:::i;:::-;2851:3;2847:39;2840:46;;2636:255;;;;;:::o;2899:372::-;;3059:67;3123:2;3118:3;3059:67;:::i;:::-;3052:74;;3159:34;3155:1;3150:3;3146:11;3139:55;3228:5;3223:2;3218:3;3214:12;3207:27;3262:2;3257:3;3253:12;3246:19;;3045:226;;;:::o;3280:371::-;;3440:67;3504:2;3499:3;3440:67;:::i;:::-;3433:74;;3540:34;3536:1;3531:3;3527:11;3520:55;3609:4;3604:2;3599:3;3595:12;3588:26;3642:2;3637:3;3633:12;3626:19;;3426:225;;;:::o;3660:327::-;;3820:67;3884:2;3879:3;3820:67;:::i;:::-;3813:74;;3920:29;3916:1;3911:3;3907:11;3900:50;3978:2;3973:3;3969:12;3962:19;;3806:181;;;:::o;3996:370::-;;4156:67;4220:2;4215:3;4156:67;:::i;:::-;4149:74;;4256:34;4252:1;4247:3;4243:11;4236:55;4325:3;4320:2;4315:3;4311:12;4304:25;4357:2;4352:3;4348:12;4341:19;;4142:224;;;:::o;4375:374::-;;4535:67;4599:2;4594:3;4535:67;:::i;:::-;4528:74;;4635:34;4631:1;4626:3;4622:11;4615:55;4704:7;4699:2;4694:3;4690:12;4683:29;4740:2;4735:3;4731:12;4724:19;;4521:228;;;:::o;4758:373::-;;4918:67;4982:2;4977:3;4918:67;:::i;:::-;4911:74;;5018:34;5014:1;5009:3;5005:11;4998:55;5087:6;5082:2;5077:3;5073:12;5066:28;5122:2;5117:3;5113:12;5106:19;;4904:227;;;:::o;5140:331::-;;5300:67;5364:2;5359:3;5300:67;:::i;:::-;5293:74;;5400:33;5396:1;5391:3;5387:11;5380:54;5462:2;5457:3;5453:12;5446:19;;5286:185;;;:::o;5479:113::-;5562:24;5580:5;5562:24;:::i;:::-;5557:3;5550:37;5544:48;;:::o;5599:107::-;5678:22;5694:5;5678:22;:::i;:::-;5673:3;5666:35;5660:46;;:::o;5713:222::-;;5840:2;5829:9;5825:18;5817:26;;5854:71;5922:1;5911:9;5907:17;5898:6;5854:71;:::i;:::-;5811:124;;;;:::o;5942:210::-;;6063:2;6052:9;6048:18;6040:26;;6077:65;6139:1;6128:9;6124:17;6115:6;6077:65;:::i;:::-;6034:118;;;;:::o;6159:310::-;;6306:2;6295:9;6291:18;6283:26;;6356:9;6350:4;6346:20;6342:1;6331:9;6327:17;6320:47;6381:78;6454:4;6445:6;6381:78;:::i;:::-;6373:86;;6277:192;;;;:::o;6476:416::-;;6676:2;6665:9;6661:18;6653:26;;6726:9;6720:4;6716:20;6712:1;6701:9;6697:17;6690:47;6751:131;6877:4;6751:131;:::i;:::-;6743:139;;6647:245;;;:::o;6899:416::-;;7099:2;7088:9;7084:18;7076:26;;7149:9;7143:4;7139:20;7135:1;7124:9;7120:17;7113:47;7174:131;7300:4;7174:131;:::i;:::-;7166:139;;7070:245;;;:::o;7322:416::-;;7522:2;7511:9;7507:18;7499:26;;7572:9;7566:4;7562:20;7558:1;7547:9;7543:17;7536:47;7597:131;7723:4;7597:131;:::i;:::-;7589:139;;7493:245;;;:::o;7745:416::-;;7945:2;7934:9;7930:18;7922:26;;7995:9;7989:4;7985:20;7981:1;7970:9;7966:17;7959:47;8020:131;8146:4;8020:131;:::i;:::-;8012:139;;7916:245;;;:::o;8168:416::-;;8368:2;8357:9;8353:18;8345:26;;8418:9;8412:4;8408:20;8404:1;8393:9;8389:17;8382:47;8443:131;8569:4;8443:131;:::i;:::-;8435:139;;8339:245;;;:::o;8591:416::-;;8791:2;8780:9;8776:18;8768:26;;8841:9;8835:4;8831:20;8827:1;8816:9;8812:17;8805:47;8866:131;8992:4;8866:131;:::i;:::-;8858:139;;8762:245;;;:::o;9014:416::-;;9214:2;9203:9;9199:18;9191:26;;9264:9;9258:4;9254:20;9250:1;9239:9;9235:17;9228:47;9289:131;9415:4;9289:131;:::i;:::-;9281:139;;9185:245;;;:::o;9437:222::-;;9564:2;9553:9;9549:18;9541:26;;9578:71;9646:1;9635:9;9631:17;9622:6;9578:71;:::i;:::-;9535:124;;;;:::o;9666:214::-;;9789:2;9778:9;9774:18;9766:26;;9803:67;9867:1;9856:9;9852:17;9843:6;9803:67;:::i;:::-;9760:120;;;;:::o;9887:122::-;;9981:5;9975:12;9965:22;;9946:63;;;:::o;10017:163::-;;10132:6;10127:3;10120:19;10169:4;10164:3;10160:14;10145:29;;10113:67;;;;:::o;10188:91::-;;10250:24;10268:5;10250:24;:::i;:::-;10239:35;;10233:46;;;:::o;10286:99::-;;10356:24;10374:5;10356:24;:::i;:::-;10345:35;;10339:46;;;:::o;10392:85::-;;10465:5;10458:13;10451:21;10440:32;;10434:43;;;:::o;10484:121::-;;10557:42;10550:5;10546:54;10535:65;;10529:76;;;:::o;10612:72::-;;10674:5;10663:16;;10657:27;;;:::o;10691:81::-;;10762:4;10755:5;10751:16;10740:27;;10734:38;;;:::o;10780:268::-;10845:1;10852:101;10866:6;10863:1;10860:13;10852:101;;;10942:1;10937:3;10933:11;10927:18;10923:1;10918:3;10914:11;10907:39;10888:2;10885:1;10881:10;10876:15;;10852:101;;;10968:6;10965:1;10962:13;10959:2;;;11033:1;11024:6;11019:3;11015:16;11008:27;10959:2;10829:219;;;;:::o;11056:97::-;;11144:2;11140:7;11135:2;11128:5;11124:14;11120:28;11110:38;;11104:49;;;:::o;11161:117::-;11230:24;11248:5;11230:24;:::i;:::-;11223:5;11220:35;11210:2;;11269:1;11266;11259:12;11210:2;11204:74;:::o;11285:133::-;11362:32;11388:5;11362:32;:::i;:::-;11355:5;11352:43;11342:2;;11409:1;11406;11399:12;11342:2;11336:82;:::o;11425:117::-;11494:24;11512:5;11494:24;:::i;:::-;11487:5;11484:35;11474:2;;11533:1;11530;11523:12;11474:2;11468:74;:::o",
  "source": "pragma solidity ^0.7.1;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract Intex is ERC20 {\n    using SafeMath for uint256;\n\n    address public owner;\n\n    constructor(uint256 initialSupply) ERC20(\"IntelligenceExchange\", \"INTX\")\n    {\n        owner = msg.sender;\n        _mint(msg.sender, initialSupply); // By default, ERC20 uses a value of 18 for decimals. Unit is 1 * 10**18.\n    }\n\n    // Get INTX tokens in exchange of ETH\n    function getTokens() public payable\n    {\n        uint256 exchangeRate = uint256(10**6); // 1 ETH -> 1M INTEX tokens\n        uint256 tokens = msg.value.mul(exchangeRate);\n        _mint(msg.sender, tokens);\n    }\n\n    // Owner can widraw ETH and transfer to beneficiary\n    function withdraw(address payable beneficiary, uint256 amount) public\n    {\n        require(msg.sender == owner);\n        beneficiary.transfer(amount);\n    }\n}\n",
  "sourcePath": "/home/irenee/work/dev/blockchain/adchain/contracts/Intex.sol",
  "ast": {
    "absolutePath": "/home/irenee/work/dev/blockchain/adchain/contracts/Intex.sol",
    "exportedSymbols": {
      "Intex": [
        490
      ]
    },
    "id": 491,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 410,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".1"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:1"
      },
      {
        "id": 411,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "24:33:1"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 412,
        "nodeType": "ImportDirective",
        "scope": 491,
        "sourceUnit": 1347,
        "src": "59:55:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/math/SafeMath.sol",
        "id": 413,
        "nodeType": "ImportDirective",
        "scope": 491,
        "sourceUnit": 840,
        "src": "115:51:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 414,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1346,
              "src": "186:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$1346",
                "typeString": "contract ERC20"
              }
            },
            "id": 415,
            "nodeType": "InheritanceSpecifier",
            "src": "186:5:1"
          }
        ],
        "contractDependencies": [
          643,
          1346,
          1424
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 490,
        "linearizedBaseContracts": [
          490,
          1346,
          1424,
          643
        ],
        "name": "Intex",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 418,
            "libraryName": {
              "id": 416,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 839,
              "src": "204:8:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$839",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "198:27:1",
            "typeName": {
              "id": 417,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "217:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "8da5cb5b",
            "id": 420,
            "mutability": "mutable",
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 490,
            "src": "231:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 419,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "231:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 440,
              "nodeType": "Block",
              "src": "335:151:1",
              "statements": [
                {
                  "expression": {
                    "id": 432,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 429,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 420,
                      "src": "345:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 430,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "353:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 431,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "353:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "345:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 433,
                  "nodeType": "ExpressionStatement",
                  "src": "345:18:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 435,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "379:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 436,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "379:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 437,
                        "name": "initialSupply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 422,
                        "src": "391:13:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 434,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1222,
                      "src": "373:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 438,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "373:32:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 439,
                  "nodeType": "ExpressionStatement",
                  "src": "373:32:1"
                }
              ]
            },
            "id": 441,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "496e74656c6c6967656e636545786368616e6765",
                    "id": 425,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "299:22:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_c59edadca0d43c7697cceebc8c096540f469134bce14933ce2ed97dd137e1428",
                      "typeString": "literal_string \"IntelligenceExchange\""
                    },
                    "value": "IntelligenceExchange"
                  },
                  {
                    "hexValue": "494e5458",
                    "id": 426,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "323:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_d23374f5af131368066f4ef3f665a4f2621ec8b6421d754919530296c80ad24f",
                      "typeString": "literal_string \"INTX\""
                    },
                    "value": "INTX"
                  }
                ],
                "id": 427,
                "modifierName": {
                  "id": 424,
                  "name": "ERC20",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1346,
                  "src": "293:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20_$1346_$",
                    "typeString": "type(contract ERC20)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "293:37:1"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 423,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 422,
                  "mutability": "mutable",
                  "name": "initialSupply",
                  "nodeType": "VariableDeclaration",
                  "scope": 441,
                  "src": "270:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 421,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "270:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "269:23:1"
            },
            "returnParameters": {
              "id": 428,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "335:0:1"
            },
            "scope": 490,
            "src": "258:228:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 467,
              "nodeType": "Block",
              "src": "574:171:1",
              "statements": [
                {
                  "assignments": [
                    445
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 445,
                      "mutability": "mutable",
                      "name": "exchangeRate",
                      "nodeType": "VariableDeclaration",
                      "scope": 467,
                      "src": "584:20:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 444,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "584:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 452,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        },
                        "id": 450,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 448,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "615:2:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "36",
                          "id": 449,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "619:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_6_by_1",
                            "typeString": "int_const 6"
                          },
                          "value": "6"
                        },
                        "src": "615:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      ],
                      "id": 447,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "607:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint256_$",
                        "typeString": "type(uint256)"
                      },
                      "typeName": {
                        "id": 446,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "607:7:1",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 451,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "607:14:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "584:37:1"
                },
                {
                  "assignments": [
                    454
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 454,
                      "mutability": "mutable",
                      "name": "tokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 467,
                      "src": "659:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 453,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "659:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 460,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 458,
                        "name": "exchangeRate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 445,
                        "src": "690:12:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "expression": {
                          "id": 455,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "676:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 456,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "src": "676:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 457,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mul",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 752,
                      "src": "676:13:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 459,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "676:27:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "659:44:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 462,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "719:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 463,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "719:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 464,
                        "name": "tokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 454,
                        "src": "731:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 461,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1222,
                      "src": "713:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 465,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "713:25:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 466,
                  "nodeType": "ExpressionStatement",
                  "src": "713:25:1"
                }
              ]
            },
            "functionSelector": "aa6ca808",
            "id": 468,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTokens",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 442,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "552:2:1"
            },
            "returnParameters": {
              "id": 443,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "574:0:1"
            },
            "scope": 490,
            "src": "534:211:1",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 488,
              "nodeType": "Block",
              "src": "881:83:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 479,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 476,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "899:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 477,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "899:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 478,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 420,
                          "src": "913:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "899:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 475,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "891:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 480,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "891:28:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 481,
                  "nodeType": "ExpressionStatement",
                  "src": "891:28:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 485,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 472,
                        "src": "950:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 482,
                        "name": "beneficiary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 470,
                        "src": "929:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 484,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "929:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 486,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "929:28:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 487,
                  "nodeType": "ExpressionStatement",
                  "src": "929:28:1"
                }
              ]
            },
            "functionSelector": "f3fef3a3",
            "id": 489,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 473,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 470,
                  "mutability": "mutable",
                  "name": "beneficiary",
                  "nodeType": "VariableDeclaration",
                  "scope": 489,
                  "src": "825:27:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 469,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "825:15:1",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 472,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 489,
                  "src": "854:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 471,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "854:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "824:45:1"
            },
            "returnParameters": {
              "id": 474,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "881:0:1"
            },
            "scope": 490,
            "src": "807:157:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 491,
        "src": "168:798:1"
      }
    ],
    "src": "0:967:1"
  },
  "legacyAST": {
    "absolutePath": "/home/irenee/work/dev/blockchain/adchain/contracts/Intex.sol",
    "exportedSymbols": {
      "Intex": [
        490
      ]
    },
    "id": 491,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 410,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".1"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:1"
      },
      {
        "id": 411,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "24:33:1"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 412,
        "nodeType": "ImportDirective",
        "scope": 491,
        "sourceUnit": 1347,
        "src": "59:55:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/math/SafeMath.sol",
        "id": 413,
        "nodeType": "ImportDirective",
        "scope": 491,
        "sourceUnit": 840,
        "src": "115:51:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 414,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1346,
              "src": "186:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$1346",
                "typeString": "contract ERC20"
              }
            },
            "id": 415,
            "nodeType": "InheritanceSpecifier",
            "src": "186:5:1"
          }
        ],
        "contractDependencies": [
          643,
          1346,
          1424
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 490,
        "linearizedBaseContracts": [
          490,
          1346,
          1424,
          643
        ],
        "name": "Intex",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 418,
            "libraryName": {
              "id": 416,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 839,
              "src": "204:8:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$839",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "198:27:1",
            "typeName": {
              "id": 417,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "217:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "8da5cb5b",
            "id": 420,
            "mutability": "mutable",
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 490,
            "src": "231:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 419,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "231:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 440,
              "nodeType": "Block",
              "src": "335:151:1",
              "statements": [
                {
                  "expression": {
                    "id": 432,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 429,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 420,
                      "src": "345:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 430,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "353:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 431,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "353:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "345:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 433,
                  "nodeType": "ExpressionStatement",
                  "src": "345:18:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 435,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "379:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 436,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "379:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 437,
                        "name": "initialSupply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 422,
                        "src": "391:13:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 434,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1222,
                      "src": "373:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 438,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "373:32:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 439,
                  "nodeType": "ExpressionStatement",
                  "src": "373:32:1"
                }
              ]
            },
            "id": 441,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "496e74656c6c6967656e636545786368616e6765",
                    "id": 425,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "299:22:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_c59edadca0d43c7697cceebc8c096540f469134bce14933ce2ed97dd137e1428",
                      "typeString": "literal_string \"IntelligenceExchange\""
                    },
                    "value": "IntelligenceExchange"
                  },
                  {
                    "hexValue": "494e5458",
                    "id": 426,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "323:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_d23374f5af131368066f4ef3f665a4f2621ec8b6421d754919530296c80ad24f",
                      "typeString": "literal_string \"INTX\""
                    },
                    "value": "INTX"
                  }
                ],
                "id": 427,
                "modifierName": {
                  "id": 424,
                  "name": "ERC20",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1346,
                  "src": "293:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20_$1346_$",
                    "typeString": "type(contract ERC20)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "293:37:1"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 423,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 422,
                  "mutability": "mutable",
                  "name": "initialSupply",
                  "nodeType": "VariableDeclaration",
                  "scope": 441,
                  "src": "270:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 421,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "270:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "269:23:1"
            },
            "returnParameters": {
              "id": 428,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "335:0:1"
            },
            "scope": 490,
            "src": "258:228:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 467,
              "nodeType": "Block",
              "src": "574:171:1",
              "statements": [
                {
                  "assignments": [
                    445
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 445,
                      "mutability": "mutable",
                      "name": "exchangeRate",
                      "nodeType": "VariableDeclaration",
                      "scope": 467,
                      "src": "584:20:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 444,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "584:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 452,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        },
                        "id": 450,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 448,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "615:2:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "36",
                          "id": 449,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "619:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_6_by_1",
                            "typeString": "int_const 6"
                          },
                          "value": "6"
                        },
                        "src": "615:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      ],
                      "id": 447,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "607:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint256_$",
                        "typeString": "type(uint256)"
                      },
                      "typeName": {
                        "id": 446,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "607:7:1",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 451,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "607:14:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "584:37:1"
                },
                {
                  "assignments": [
                    454
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 454,
                      "mutability": "mutable",
                      "name": "tokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 467,
                      "src": "659:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 453,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "659:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 460,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 458,
                        "name": "exchangeRate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 445,
                        "src": "690:12:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "expression": {
                          "id": 455,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "676:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 456,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "src": "676:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 457,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mul",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 752,
                      "src": "676:13:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 459,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "676:27:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "659:44:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 462,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "719:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 463,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "719:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 464,
                        "name": "tokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 454,
                        "src": "731:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 461,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1222,
                      "src": "713:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 465,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "713:25:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 466,
                  "nodeType": "ExpressionStatement",
                  "src": "713:25:1"
                }
              ]
            },
            "functionSelector": "aa6ca808",
            "id": 468,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTokens",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 442,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "552:2:1"
            },
            "returnParameters": {
              "id": 443,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "574:0:1"
            },
            "scope": 490,
            "src": "534:211:1",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 488,
              "nodeType": "Block",
              "src": "881:83:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 479,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 476,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "899:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 477,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "899:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 478,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 420,
                          "src": "913:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "899:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 475,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "891:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 480,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "891:28:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 481,
                  "nodeType": "ExpressionStatement",
                  "src": "891:28:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 485,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 472,
                        "src": "950:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 482,
                        "name": "beneficiary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 470,
                        "src": "929:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 484,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "929:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 486,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "929:28:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 487,
                  "nodeType": "ExpressionStatement",
                  "src": "929:28:1"
                }
              ]
            },
            "functionSelector": "f3fef3a3",
            "id": 489,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 473,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 470,
                  "mutability": "mutable",
                  "name": "beneficiary",
                  "nodeType": "VariableDeclaration",
                  "scope": 489,
                  "src": "825:27:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 469,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "825:15:1",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 472,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 489,
                  "src": "854:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 471,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "854:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "824:45:1"
            },
            "returnParameters": {
              "id": 474,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "881:0:1"
            },
            "scope": 490,
            "src": "807:157:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 491,
        "src": "168:798:1"
      }
    ],
    "src": "0:967:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.1+commit.f4a555be.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        }
      },
      "links": {},
      "address": "0xa80E74Ee52efc3D28CF3778d1B54B4dc0c23028b",
      "transactionHash": "0x01c0600c1150db64e4bd65274de3eb4c668cf5ed24e5f9b7b2266c163de10eac"
    }
  },
  "schemaVersion": "3.2.4",
  "updatedAt": "2020-11-19T20:05:34.636Z",
  "networkType": "ethereum",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}