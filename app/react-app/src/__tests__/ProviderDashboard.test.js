import { render, screen } from '@testing-library/react';
import BrandSafetyCategories from 'components/BrandSafety/Categories';
import ProviderDashboard from '../components/ProviderDashboard';

// There is an issue in react-bulma-components Select when multiple selection is enabled.
// Despite we properly pass an array to value prop, it keeps checking for a string or number.
// BeforeAll silents the error generated by this issue.
//
// Possible fix:
// PropTypes.oneOfType([
//   PropTypes.string,
//   PropTypes.number,
//   PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),
// ])
const originalError = console.error

beforeAll(() => {
  jest.spyOn(console, 'error').mockImplementation((...args) => {
    if (typeof args[0] === 'string' && args[0].includes('Failed prop type: Invalid prop `value` supplied to `Select`')) {
      return
    }
    return originalError.call(console, args)
  })
})

afterAll(() => {
  console.error.mockRestore()
})

test('renders welcome message', () => {
  const provider = { name: 'name' };
  const user = { address: 'address', provider: provider };
  const web3 = { utils: { hexToString: function(_) {} } };
  const exchange = { getDataIntelligences: async function(_) { return []; } };

  render(<ProviderDashboard user={user} web3={web3} exchange={exchange}/>);

  const welcome = screen.getByText(/Welcome/i);
  expect(welcome).toBeInTheDocument();
});

test('renders all brand safety categories in Select options', () => {
  const provider = { name: 'name' };
  const user = { address: 'address', provider: provider };
  const web3 = { utils: { hexToString: function(_) {} } };
  const exchange = { getDataIntelligences: async function(_) { return []; } };

  render(<ProviderDashboard user={user} web3={web3} exchange={exchange}/>);

  const brandSafetyCategories = new BrandSafetyCategories();

  const options = screen.getAllByRole('option');

  const keys = Object.keys(brandSafetyCategories.categories);
  expect(options.length).toEqual(keys.length)

  for (let i=0; i<keys.length; i++) {
    expect(options[i]).toHaveValue(keys[i]);
    expect(options[i]).toHaveTextContent(brandSafetyCategories.categories[keys[i]]);
  }
});
